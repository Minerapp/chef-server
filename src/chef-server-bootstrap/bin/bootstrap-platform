#! /usr/bin/env ruby
#
# Author:: Tyler Cloke <tyler@chef.io>
# Copyright:: Copyright (c) 2014 Chef, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Usage:
# ./bootstrap-platform CONFIG_FILE USER_CONFIG_FILE

require 'rubygems'
require 'bundler/setup'
require 'restclient'
require 'json'
require 'yaml'
require 'uuid'
require 'sequel'

class BootstrapPlatform

  PLACEHOLDER_GLOBAL_ORG_ID = "00000000000000000000000000000000"

  def initialize(config_file, user_config_file)
    @config_file, @user_config_file = config_file, user_config_file
  end

  def bootstrap
    config = YAML.load_file(@config_file)

    db = Sequel.connect("#{config['db_driver']}://#{config['db_user']}:#{config['db_password']}@#{config['db_host']}:#{config['db_port']}/opscode_chef")

    #################################
    # create superuser authz object #
    #################################

    superuser_authz_id = create_object_in_authz("actors", config['bifrost_superuser_id'], config['bifrost_host'], config['bifrost_port'])

    ####################
    # create superuser #
    ####################

    # load certificate
    user = YAML.load_file(@user_config_file)
    user['public_key'] = File.read(config['superuser_public_key'])

    # create serialized_object
    serialized_object = {}
    ["first_name", "last_name", "display_name"].each do |field|
      serialized_object[field] = user[field]
      # these aren't database columns, so remove from user object
      user.delete(field)
    end
    user['serialized_object'] = JSON.generate(serialized_object)

    # generate / assign IDs
    user['authz_id'] = superuser_authz_id
    user['id'] = UUID.new.generate(:compact)

    # create timestamps
    user_created_time = Time.now.utc
    user['created_at'] = user_created_time
    user['updated_at'] = user_created_time
    user['last_updated_by'] = config['bifrost_superuser_id']

    # indicates public_key instead of cert
    user['pubkey_version'] = 0

    # not an admin (strangely)
    user['admin'] = 'f'

    # insert populated user object into the postgres
    db[:users].insert(user)

    ##############################
    # create superuser container #
    ##############################
    create_global_containers(superuser_authz_id, PLACEHOLDER_GLOBAL_ORG_ID, db, config['bifrost_host'], config['bifrost_port'])
  end

  private

  def create_object_in_authz(object_name, requester_id, bifrost_host, bifrost_port)
    url = "http://#{bifrost_host}:#{bifrost_port}/#{object_name}"
    headers = {
      :content_type => :json,
      :accept => :json,
      'X-Ops-Requesting-Actor-Id' => requester_id
    }

    result = RestClient.post(url, "{}", headers)
    JSON.parse(result)["id"]
  end

  def create_global_containers(superuser_authz_id, placeholder_id, db, bifrost_host, bifrost_port)
    %w(organizations users).each do |name|
      authz_id = create_object_in_authz("containers", superuser_authz_id, bifrost_host, bifrost_port)
      created_time = Time.now.utc
      db[:containers].insert(:name => name, :id => authz_id, :org_id => placeholder_id, :last_updated_by => superuser_authz_id, :authz_id => authz_id, :created_at => created_time.to_s[0..18], :updated_at => created_time.to_s[0..18])
    end
  end
end

if __FILE__ == $0
  if ARGV.length != 2
    puts "You must pass two arguments. Usage:"
    puts "./bootstrap-platform CONFIG_FILE USER_CONFIG_FILE"
    exit 1
  end
  BootstrapPlatform.new(ARGV[0], ARGV[1]).bootstrap
end
